<?php

namespace Bundle\CalendarBundle\Model;

use Doctrine\Common\Collections\ArrayCollection;

abstract class Recurrence
{
    protected $id;

    protected $event;

    /**
     * An array of strings representing the days of the week on which this
     * recurrence occurs. Possible integer values are sunday, monday, tuesday,
     * wednesday, thursday, friday and saturday. If you set $days, you must also
     * set $dayFrequency. For example, if $days is 1 and $dayFrequency is 0,
     * then the recurrence is every Monday.
     *
     * @return array
     */
    protected $days;

    /**
     * An array of integers used in combination with $days to specify which week
     * within a month or year this recurrence occurs. For example, if $frequency
     * is monthly, $days is 0 and $dayFrequency contains 2, then the recurrence
     * will occur the second Monday of every month.
     *
     * @var array
     */
    protected $dayFrequency;

    /**
     * An array of numbers, with integer values ranging from 1 to 12, that
     * indicate the months within a year that this recurrence occurs.
     *
     * @var array
     */
    protected $months;

    /**
     * An array of numbers, with integer values ranging from 1 to 31 or -31 to
     * -1, that indicate the days within a month that this recurrence occurs.
     * Negative values indicate the number of days from the last day of the month.
     *
     * @var array
     */
    protected $monthDays;

    /**
     * An array of integer numbers used to specify specific days within an
     * expanded set of occurrences. The numbers specify the index of an expanded
     * sequence of occurrences starting with 1. For example, if $frequency is
     * daily, the event starts on a Monday, and bysetpos is (1, 8), then the
     * recurrence will occur on the first and second Mondays only. If
     * $setPosition is (2, 8) the event or task will occur on the first Tuesday
     * in the sequence and the second Monday.
     *
     * @var array
     */
    protected $setPosition;

    /**
     * An array of numbers, with integer values ranging from 1 to 53 or -53 to -1,
     * that indicate the weeks within a year that this recurrence occurs.
     * Negative values indicate the number of weeks from the last week of the year.
     *
     * @var array
     */
    protected $weekNumbers;

    /**
     * An array of numbers, with integer values ranging from 1 to 366 or -366
     * to -1, that indicate the days within a year that this recurrence occurs.
     * Negative values indicate the number of days from the last day of the year.
     *
     * @var array
     */
    protected $yearDays;

    /**
     * The number of occurrences generated by this recurrence.
     *
     * @var int
     */
    protected $count;

    /**
     * The frequency of this recurrence specified by a constant. Possible values
     * are daily, weekly, monthly, or yearly.
     *
     * @var string
     */
    protected $frequency;

    /**
     * A positive integer indicating how often the specified frequency repeats.
     * For example, if $frequency is daily, then an interval value of 2
     * indicates a recurrence every two days.
     *
     * @var int
     */
    protected $interval;

    /**
     * The end date of this recurrence.
     *
     * @var DateTime
     */
    protected $until;

    /**
     * A string that indicates the start day of the week. Possible values are
     * sunday, monday, tuesday, wednesday, thursday, friday, and saturday.
     *
     * @var int
     */
    protected $weekStartDay;

    public function getId()
    {
        return $this->id;
    }

    public function setEvent(Event $event)
    {
        $this->event = $event;
    }

    public function getEvent()
    {
        return $this->event;
    }

    public function getDays()
    {
        return $this->days ?: $this->days = new ArrayCollection();
    }

    public function addDay($day)
    {
        if (!$this->getDays()->contains($day)) {
            $this->getDays()->add($day);
        }
    }

    public function removeDay($day)
    {
        if ($this->getDays()->contains($day)) {
            $this->getDays()->remove($day);
        }
    }

    public function getDayFrequency()
    {
        return $this->dayFrequency;
    }

    public function addDayFrequency($frequency)
    {
        $this->dayFrequency;
    }

    public function getMonths()
    {
        return $this->months ?: $this->months = new ArrayCollection();
    }

    public function addMonth($month)
    {
        if (!$this->getMonths()->contains($month)) {
            $this->getMonths()->add($month);
        }
    }

    public function removeMonth($month)
    {
        if ($this->getMonths()->contains($month)) {
            $this->getMonths()->add($month);
        }
    }

    public function getMonthDays()
    {
        return $this->monthDays ?: $this->monthDays = new ArrayCollection();
    }

    public function addMonthDay($day)
    {
        if (!$this->getMonthDays()->contains($day)) {
            $this->getMonthDays()->add($day);
        }
    }

    public function removeMonthDay($day)
    {
        if ($this->getMonthDays()->contains($day)) {
            $this->getMonthDays()->add($day);
        }
    }

    public function setSetPosition($position)
    {
        $this->setPosition = $position;
    }

    public function getSetPosition()
    {
        return $this->setPosition;
    }

    public function getWeekNumbers()
    {
        return $this->weekNumbers ?: $this->monthDays = new ArrayCollection();
    }

    public function addWeekNumber($week)
    {
        if (!$this->getWeekNumbers()->contains($week)) {
            $this->getWeekNumbers()->add($week);
        }
    }

    public function removeWeekNumber($week)
    {
        if ($this->getWeekNumbers()->contains($week)) {
            $this->getWeekNumbers()->remove($week);
        }
    }

    public function getYearDays()
    {
        return $this->yearDays ?: $this->yearDays = new ArrayCollection();
    }

    public function addYearDay($day)
    {
        if (!$this->getYearDays()->contains($day)) {
            $this->getYearDays()->add($day);
        }
    }

    public function removeYearDay($day)
    {
        if ($this->getYearDays()->contains($day)) {
            $this->getYearDays()->remove($day);
        }
    }

    public function setCount($count)
    {
        $this->count = $count;
    }

    public function getCount()
    {
        return $this->count;
    }

    public function setFrequency($frequency)
    {
        $this->frequency = $frequency;
    }
    
    public function getFrequency()
    {
        return $this->frequency;
    }

    public function setInterval($interval)
    {
        $this->interval = $interval;
    }

    public function getInterval()
    {
        return $this->interval;
    }
    
    public function setUntil(DateTime $until)
    {
        $this->until = $until;
    }
    public function getUntil()
    {
        return $this->until;
    }

    public function setWeekStartDay($day)
    {
        $this->weekStartDay = $day;
    }
    
    public function getWeekStartDay()
    {
        return $this->weekStartDay;
    }

    public function contains(DateTime $dateTime)
    {
        
    }
}